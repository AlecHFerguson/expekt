{"name":"Expekt","tagline":"BDD assertion library for Kotlin","body":"# Expekt [![Travic CI](https://travis-ci.org/winterbe/expekt.svg?branch=master)](https://travis-ci.org/winterbe/expekt)\r\n\r\nExpekt is a (work in progress) BDD assertion library for [Kotlin](http://kotlinlang.org/), inspired by [Chai.js](http://chaijs.com/). It works with your favorite test runner such as [JUnit](http://junit.org/) and [Spek](http://jetbrains.github.io/spek/).\r\n\r\n```kotlin\r\nclass ExpektTest {\r\n    @Test\r\n    fun helloExpekt() {\r\n        23.should.equal(23)\r\n        \"Kotlin\".should.not.contain(\"Scala\")\r\n        listOf(1, 2, 3).should.have.size.above(1)\r\n    }\r\n}\r\n```\r\n\r\n> [Follow on Twitter](https://twitter.com/winterbe_) for updates!\r\n\r\n### Getting started\r\n\r\nExpekt is available via [Maven Central](https://repo1.maven.org/maven2/com/winterbe/expekt/). Just add the dependency to your Maven POM or Gradle build config.\r\n\r\n##### Maven\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.winterbe</groupId>\r\n    <artifactId>expekt</artifactId>\r\n    <version>0.2.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n##### Gradle\r\n\r\n```groovy\r\ntestCompile \"com.winterbe:expekt:0.2.0\"\r\n```\r\n\r\n### Introduction\r\n\r\nExpekt let's you write assertions in natural english language by building fluent sentences in your JUnit tests.\r\n\r\nIt comes in two flavors `should` and `expect`, both exposing the same API. It's up to you which variant to use. The property `should` is available on any object (e.g. `myObject.should`), even on `null`. The function `expect` accepts any object as parameter (e.g. `expect(myObject)`) instead.\r\n\r\nWhen using IntelliJ IDEA you can simply use `expect` and `should` from classpath. The IDE handles all imports for you. In case you have to handle imports manually, add one of those to your test file:\r\n\r\n```kotlin\r\nimport com.winterbe.expekt.expect\r\nimport com.winterbe.expekt.should\r\n```\r\n\r\nThe Expekt API consists of many chainable properties and functions. Properties like `to`, `be` and `which` are provided to improve readibility. They don't serve any semantical meaning. The property `not` is used to negate expectations. Depending on the type of the initial value plenty of properties and functions are available to assert different aspects of the value, e.g. you can assert that a collection contains some elements, that a number is within it's bounds or that a string matches a given regex pattern.\r\n\r\nSee [API doc](APIDOC.md) for all available assertion properties and functions.\r\n\r\n### What happens when expectations fail?\r\n\r\nWhen an expectation fails Expekt throws a `java.lang.AssertionError` containing a readable message, so you can easily see what's going wrong.\r\n\r\n```kotlin\r\nclass FailingTest {\r\n    @Test\r\n    fun thisTestFails() {\r\n        3.4.should.be.closeTo(3.2, delta = 0.1)\r\n    }\r\n}\r\n```\r\n\r\nThe above test fails, resulting in the following exception:\r\n\r\n```\r\njava.lang.AssertionError: 3.4 should be closeTo 3.2 Â±0.1\r\n\r\n\tat com.winterbe.expekt.ExpectAny.fail(ExpectAny.kt:77)\r\n\tat com.winterbe.expekt.ExpectAny.verify(ExpectAny.kt:68)\r\n\tat com.winterbe.expekt.ExpectDouble.closeTo(ExpectDouble.kt:12)\r\n\tat com.example.ExampleTest.example1(ExampleTest.kt:10)\r\n```\r\n\r\n### Examples\r\n\r\nExample assertions using the `should` property:\r\n\r\n```kotlin\r\n23.should.equal(23)\r\nnull.should.be.`null`\r\n\"foo\".should.not.equal(\"bar\")\r\n3.should.satisfy { it % 2 == 1 }\r\n3.should.be.above(2).and.below(4)\r\n\"abc\".should.contain(\"bc\").and.startWith(\"a\")\r\n\"abc\".should.not.have.length.above(3)\r\n\"abc\".should.not.match(Regex(\"[0-9]+\"))\r\nlistOf(1, 2, 3).should.contain(3).and.have.length.above(2)\r\nlistOf(1, 2, 3).should.contain.any.elements(1, 3, 4)\r\nlistOf(1, 2, 3).should.have.all.elements(1, 2, 3)\r\nmapOf(\"foo\" to \"bar\", \"bar\" to \"foo\").should.contain(\"foo\" to \"bar\")\r\n```\r\n\r\nExample assertions using the `expect` function:\r\n\r\n```kotlin\r\nexpect(23).to.equal(23)\r\nexpect(null).to.be.`null`\r\nexpect(\"foo\").not.to.equal(\"bar\")\r\nexpect(3).not.to.satisfy { it % 2 == 1 }\r\nexpect(3).to.be.above(2).and.to.be.below(4)\r\nexpect(\"abc\").to.contain(\"bc\").and.to.startWith(\"a\")\r\nexpect(\"abc\").not.to.have.length.above(3)\r\nexpect(\"abc\").not.to.match(Regex(\"[0-9]+\"))\r\nexpect(listOf(1, 2, 3)).to.contain(3).and.to.have.length.above(2)\r\nexpect(listOf(1, 2, 3)).to.contain.any.elements(1, 3, 4)\r\nexpect(listOf(1, 2, 3)).to.have.all.elements(1, 2, 3)\r\nexpect(mapOf(\"foo\" to \"bar\", \"bar\" to \"foo\")).to.contain(\"foo\" to \"bar\")\r\n```\r\n\r\n### License\r\n\r\nMIT","google":"UA-48569937-1","note":"Don't delete this file! It's used internally to help with page regeneration."}